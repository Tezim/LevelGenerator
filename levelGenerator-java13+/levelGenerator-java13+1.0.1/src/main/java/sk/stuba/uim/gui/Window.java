package sk.stuba.uim.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import sk.stuba.uim.automaton.AutomatonMain;
import sk.stuba.uim.automaton.enums.Tiles;
import sk.stuba.uim.automaton.exceptions.InvalidArgument;
import sk.stuba.uim.automaton.exceptions.RunException;
import sk.stuba.uim.automaton.objects.MetaData;
import sk.stuba.uim.automaton.output.OutputHandler;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

public class Window {
    public JFrame frame;
    public JPanel mainPanel;
    protected JTextField filenameTextField;
    protected JTextField iterationsTextField;
    protected JTextField heightTextField;
    protected JTextField widthTextField;
    protected JButton startButton;
    private JPanel sliderpanel;

    private JComboBox stav1_L1;
    private JComboBox stav2_L1;
    private JComboBox stav1_L2;
    private JComboBox stav2_L2;
    private JComboBox stav1_L3;
    private JComboBox stav2_L3;
    private JComboBox stav1_L4;
    private JComboBox stav2_L4;

    private JSlider slider1;
    private JSlider slider2;
    private JSlider slider3;
    private JSlider slider4;
    private JLabel d01;
    private JLabel d02;
    private JLabel d03;
    private JLabel d04;
    private JButton pomocButton;
    private JCheckBox picture;

    private boolean png = false;

    private String message = " Názov súboru - Meno súboru, do ktorého bude mapa uložená\n" +
            " Počet iterácií - Počet iterácií automatu pre každú vrstvu (MIN = 0, MAX = )\n" +
            " Výška - Výška konfigurácie - mapy (MIN = 10, MAX = )\n" +
            " Šírka - Šírka konfigurácie - mapy (MIN = 10, MAX = ) \n" +
            " Hustota - Pravdepodobnosť výskytu stavu 1 v danej vrstve (MIN = 0, MAX = 100) \n" +
            " Obrazový výstup - Vygeneruje spolu s .txt aj .png súbor";


    public Window() {
    }

    public Window(JFrame frame) {
        this.frame = frame;
        startButton.addActionListener(new StartListener());
        pomocButton.addActionListener(e -> JOptionPane.showMessageDialog(frame, message, "Nápoveda", JOptionPane.INFORMATION_MESSAGE));
        pomocButton.setBackground(new Color(0, 25, 63));
        pomocButton.setFocusPainted(false);
        pomocButton.setForeground(Color.WHITE);
        slider1.addChangeListener(new SliderListener(d01));
        slider2.addChangeListener(new SliderListener(d02));
        slider3.addChangeListener(new SliderListener(d03));
        slider4.addChangeListener(new SliderListener(d04));
        picture.addItemListener(e -> png = (e.getStateChange() == ItemEvent.SELECTED));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setBackground(new Color(-16773081));
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16724501)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(6, 4, new Insets(10, 0, 10, 30), -1, -1));
        panel1.setBackground(new Color(-16770238));
        panel1.setForeground(new Color(-131585));
        mainPanel.add(panel1, BorderLayout.CENTER);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        label1.setBackground(new Color(-10590589));
        label1.setForeground(new Color(-1576193));
        label1.setText("Názov výstupného súboru");
        panel1.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        filenameTextField = new JTextField();
        filenameTextField.setBackground(new Color(-6906199));
        filenameTextField.setColumns(15);
        filenameTextField.setHorizontalAlignment(10);
        filenameTextField.setText("filename");
        panel1.add(filenameTextField, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setBackground(new Color(-10590589));
        label2.setForeground(new Color(-1445121));
        label2.setText("Šírka");
        panel1.add(label2, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setBackground(new Color(-10590589));
        label3.setForeground(new Color(-1445121));
        label3.setText("Počet iterácií");
        panel1.add(label3, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setBackground(new Color(-10590589));
        label4.setForeground(new Color(-262657));
        label4.setText("Výška");
        panel1.add(label4, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        iterationsTextField = new JTextField();
        iterationsTextField.setBackground(new Color(-6906199));
        iterationsTextField.setText("iterations");
        panel1.add(iterationsTextField, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        heightTextField = new JTextField();
        heightTextField.setBackground(new Color(-6906199));
        heightTextField.setText("height min 10");
        panel1.add(heightTextField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        widthTextField = new JTextField();
        widthTextField.setBackground(new Color(-6906199));
        widthTextField.setText("width min 10");
        widthTextField.setToolTipText("");
        panel1.add(widthTextField, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(1, 1), new Dimension(1, 1), new Dimension(1, 1), 1, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-16770238));
        panel1.add(panel2, new GridConstraints(5, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setBackground(new Color(-16770238));
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16724501)), "vrstva 01", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("JetBrains Mono", -1, -1, panel3.getFont()), new Color(-16724501)));
        final JLabel label5 = new JLabel();
        label5.setForeground(new Color(-1379585));
        label5.setText("Stav 1");
        label5.setVerticalAlignment(0);
        panel3.add(label5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label6 = new JLabel();
        label6.setForeground(new Color(-1540));
        label6.setText("Stav 2");
        panel3.add(label6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        stav2_L1 = new JComboBox();
        stav2_L1.setBackground(new Color(-16773081));
        Font stav2_L1Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav2_L1.getFont());
        if (stav2_L1Font != null) stav2_L1.setFont(stav2_L1Font);
        stav2_L1.setForeground(new Color(-1379585));
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("DEFAULT");
        defaultComboBoxModel1.addElement("WATER");
        defaultComboBoxModel1.addElement("LAND");
        defaultComboBoxModel1.addElement("LAVA");
        defaultComboBoxModel1.addElement("SAND");
        defaultComboBoxModel1.addElement("EMPTY");
        stav2_L1.setModel(defaultComboBoxModel1);
        panel3.add(stav2_L1, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stav1_L1 = new JComboBox();
        stav1_L1.setBackground(new Color(-16773081));
        Font stav1_L1Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav1_L1.getFont());
        if (stav1_L1Font != null) stav1_L1.setFont(stav1_L1Font);
        stav1_L1.setForeground(new Color(-1510913));
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("DEFAULT");
        defaultComboBoxModel2.addElement("WATER");
        defaultComboBoxModel2.addElement("LAND");
        defaultComboBoxModel2.addElement("LAVA");
        defaultComboBoxModel2.addElement("SAND");
        defaultComboBoxModel2.addElement("EMPTY");
        stav1_L1.setModel(defaultComboBoxModel2);
        panel3.add(stav1_L1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setBackground(new Color(-16770238));
        panel2.add(panel4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16724501)), "vrstva 04", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("JetBrains Mono", -1, -1, panel4.getFont()), new Color(-16724501)));
        final JLabel label7 = new JLabel();
        label7.setForeground(new Color(-1379585));
        label7.setText("Stav 1");
        label7.setVerticalAlignment(0);
        panel4.add(label7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label8 = new JLabel();
        label8.setForeground(new Color(-1540));
        label8.setText("Stav 2");
        panel4.add(label8, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        stav2_L4 = new JComboBox();
        stav2_L4.setBackground(new Color(-16773081));
        Font stav2_L4Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav2_L4.getFont());
        if (stav2_L4Font != null) stav2_L4.setFont(stav2_L4Font);
        stav2_L4.setForeground(new Color(-1379585));
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("DEFAULT");
        defaultComboBoxModel3.addElement("WATER");
        defaultComboBoxModel3.addElement("LAND");
        defaultComboBoxModel3.addElement("LAVA");
        defaultComboBoxModel3.addElement("SAND");
        defaultComboBoxModel3.addElement("EMPTY");
        stav2_L4.setModel(defaultComboBoxModel3);
        panel4.add(stav2_L4, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stav1_L4 = new JComboBox();
        stav1_L4.setBackground(new Color(-16773081));
        Font stav1_L4Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav1_L4.getFont());
        if (stav1_L4Font != null) stav1_L4.setFont(stav1_L4Font);
        stav1_L4.setForeground(new Color(-1510913));
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("DEFAULT");
        defaultComboBoxModel4.addElement("WATER");
        defaultComboBoxModel4.addElement("LAND");
        defaultComboBoxModel4.addElement("LAVA");
        defaultComboBoxModel4.addElement("SAND");
        defaultComboBoxModel4.addElement("EMPTY");
        stav1_L4.setModel(defaultComboBoxModel4);
        panel4.add(stav1_L4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel5.setBackground(new Color(-16770238));
        panel2.add(panel5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16724501)), "vrstva 02", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("JetBrains Mono", -1, -1, panel5.getFont()), new Color(-16724501)));
        final JLabel label9 = new JLabel();
        label9.setForeground(new Color(-1379585));
        label9.setText("Stav 1");
        label9.setVerticalAlignment(0);
        panel5.add(label9, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label10 = new JLabel();
        label10.setForeground(new Color(-1540));
        label10.setText("Stav 2");
        panel5.add(label10, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        stav2_L2 = new JComboBox();
        stav2_L2.setBackground(new Color(-16773081));
        Font stav2_L2Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav2_L2.getFont());
        if (stav2_L2Font != null) stav2_L2.setFont(stav2_L2Font);
        stav2_L2.setForeground(new Color(-1379585));
        final DefaultComboBoxModel defaultComboBoxModel5 = new DefaultComboBoxModel();
        defaultComboBoxModel5.addElement("DEFAULT");
        defaultComboBoxModel5.addElement("WATER");
        defaultComboBoxModel5.addElement("LAND");
        defaultComboBoxModel5.addElement("LAVA");
        defaultComboBoxModel5.addElement("SAND");
        defaultComboBoxModel5.addElement("EMPTY");
        stav2_L2.setModel(defaultComboBoxModel5);
        panel5.add(stav2_L2, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stav1_L2 = new JComboBox();
        stav1_L2.setBackground(new Color(-16773081));
        Font stav1_L2Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav1_L2.getFont());
        if (stav1_L2Font != null) stav1_L2.setFont(stav1_L2Font);
        stav1_L2.setForeground(new Color(-1510913));
        final DefaultComboBoxModel defaultComboBoxModel6 = new DefaultComboBoxModel();
        defaultComboBoxModel6.addElement("DEFAULT");
        defaultComboBoxModel6.addElement("WATER");
        defaultComboBoxModel6.addElement("LAND");
        defaultComboBoxModel6.addElement("LAVA");
        defaultComboBoxModel6.addElement("SAND");
        defaultComboBoxModel6.addElement("EMPTY");
        stav1_L2.setModel(defaultComboBoxModel6);
        panel5.add(stav1_L2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel6.setBackground(new Color(-16770238));
        panel2.add(panel6, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16724501)), "vrstva 03", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("JetBrains Mono", -1, -1, panel6.getFont()), new Color(-16724501)));
        final JLabel label11 = new JLabel();
        label11.setForeground(new Color(-1379585));
        label11.setText("Stav 1");
        label11.setVerticalAlignment(0);
        panel6.add(label11, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JLabel label12 = new JLabel();
        label12.setForeground(new Color(-1540));
        label12.setText("Stav 2");
        panel6.add(label12, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        stav2_L3 = new JComboBox();
        stav2_L3.setBackground(new Color(-16773081));
        Font stav2_L3Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav2_L3.getFont());
        if (stav2_L3Font != null) stav2_L3.setFont(stav2_L3Font);
        stav2_L3.setForeground(new Color(-1379585));
        final DefaultComboBoxModel defaultComboBoxModel7 = new DefaultComboBoxModel();
        defaultComboBoxModel7.addElement("DEFAULT");
        defaultComboBoxModel7.addElement("WATER");
        defaultComboBoxModel7.addElement("LAND");
        defaultComboBoxModel7.addElement("LAVA");
        defaultComboBoxModel7.addElement("SAND");
        defaultComboBoxModel7.addElement("EMPTY");
        stav2_L3.setModel(defaultComboBoxModel7);
        panel6.add(stav2_L3, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stav1_L3 = new JComboBox();
        stav1_L3.setBackground(new Color(-16773081));
        Font stav1_L3Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, stav1_L3.getFont());
        if (stav1_L3Font != null) stav1_L3.setFont(stav1_L3Font);
        stav1_L3.setForeground(new Color(-1510913));
        final DefaultComboBoxModel defaultComboBoxModel8 = new DefaultComboBoxModel();
        defaultComboBoxModel8.addElement("DEFAULT");
        defaultComboBoxModel8.addElement("WATER");
        defaultComboBoxModel8.addElement("LAND");
        defaultComboBoxModel8.addElement("LAVA");
        defaultComboBoxModel8.addElement("SAND");
        defaultComboBoxModel8.addElement("EMPTY");
        stav1_L3.setModel(defaultComboBoxModel8);
        panel6.add(stav1_L3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sliderpanel = new JPanel();
        sliderpanel.setLayout(new GridLayoutManager(4, 1, new Insets(20, 0, 0, 0), -1, -1));
        sliderpanel.setBackground(new Color(-16773081));
        panel1.add(sliderpanel, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        sliderpanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(2, 2, new Insets(30, 0, 0, 0), -1, -1));
        panel7.setBackground(new Color(-16773081));
        sliderpanel.add(panel7, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel7.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        slider3 = new JSlider();
        slider3.setBackground(new Color(-16773081));
        slider3.setEnabled(true);
        slider3.setForeground(new Color(-9489726));
        slider3.setValue(0);
        slider3.putClientProperty("Slider.paintThumbArrowShape", Boolean.FALSE);
        panel7.add(slider3, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label13 = new JLabel();
        Font label13Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, label13.getFont());
        if (label13Font != null) label13.setFont(label13Font);
        label13.setForeground(new Color(-1379585));
        label13.setText("Hustota : ");
        panel7.add(label13, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        d03 = new JLabel();
        Font d03Font = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, -1, d03.getFont());
        if (d03Font != null) d03.setFont(d03Font);
        d03.setForeground(new Color(-1445377));
        d03.setText("0");
        panel7.add(d03, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(2, 2, new Insets(25, 0, 0, 0), -1, -1));
        panel8.setBackground(new Color(-16773081));
        sliderpanel.add(panel8, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel8.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        slider4 = new JSlider();
        slider4.setBackground(new Color(-16773081));
        slider4.setForeground(new Color(-9489726));
        slider4.setPaintTicks(false);
        slider4.setPaintTrack(true);
        slider4.setSnapToTicks(false);
        slider4.setToolTipText("0");
        slider4.setValue(0);
        panel8.add(slider4, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label14 = new JLabel();
        Font label14Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, label14.getFont());
        if (label14Font != null) label14.setFont(label14Font);
        label14.setForeground(new Color(-1379585));
        label14.setText("Hustota :");
        panel8.add(label14, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        d04 = new JLabel();
        Font d04Font = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, -1, d04.getFont());
        if (d04Font != null) d04.setFont(d04Font);
        d04.setForeground(new Color(-1510657));
        d04.setText("0");
        panel8.add(d04, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(2, 2, new Insets(25, 0, 0, 0), -1, -1));
        panel9.setBackground(new Color(-16773081));
        sliderpanel.add(panel9, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel9.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        slider2 = new JSlider();
        slider2.setBackground(new Color(-16773081));
        slider2.setForeground(new Color(-9489726));
        slider2.setValue(0);
        panel9.add(slider2, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label15 = new JLabel();
        Font label15Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, label15.getFont());
        if (label15Font != null) label15.setFont(label15Font);
        label15.setForeground(new Color(-1445121));
        label15.setText("Hustota : ");
        panel9.add(label15, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        d02 = new JLabel();
        Font d02Font = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, -1, d02.getFont());
        if (d02Font != null) d02.setFont(d02Font);
        d02.setForeground(new Color(-1510657));
        d02.setText("0");
        panel9.add(d02, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel10.setBackground(new Color(-16773081));
        sliderpanel.add(panel10, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel10.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        slider1 = new JSlider();
        slider1.setBackground(new Color(-16773081));
        slider1.setForeground(new Color(-9489726));
        slider1.setInverted(false);
        slider1.setSnapToTicks(false);
        slider1.setValue(0);
        panel10.add(slider1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label16 = new JLabel();
        Font label16Font = this.$$$getFont$$$("JetBrains Mono", -1, -1, label16.getFont());
        if (label16Font != null) label16.setFont(label16Font);
        label16.setForeground(new Color(-1445121));
        label16.setText("Hustota :");
        panel10.add(label16, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        d01 = new JLabel();
        Font d01Font = this.$$$getFont$$$("JetBrains Mono", Font.BOLD, -1, d01.getFont());
        if (d01Font != null) d01.setFont(d01Font);
        d01.setForeground(new Color(-1445377));
        d01.setText("0");
        panel10.add(d01, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel11.setBackground(new Color(-16773081));
        panel1.add(panel11, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        panel11.add(startButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        picture = new JCheckBox();
        picture.setBackground(new Color(-16773081));
        picture.setForeground(new Color(-1445377));
        picture.setText("Obrazový výstup");
        panel1.add(picture, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel12.setBackground(new Color(-16773081));
        mainPanel.add(panel12, BorderLayout.NORTH);
        pomocButton = new JButton();
        pomocButton.setBorderPainted(false);
        pomocButton.setContentAreaFilled(true);
        pomocButton.setForeground(new Color(-1576193));
        pomocButton.setOpaque(true);
        pomocButton.setText("Nápoveda");
        panel12.add(pomocButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel12.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        label5.setLabelFor(stav1_L1);
        label7.setLabelFor(stav1_L1);
        label9.setLabelFor(stav1_L1);
        label11.setLabelFor(stav1_L1);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    protected class StartListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            startButton.setEnabled(false);
            try {
                int textResult = checkTextFields();
                int layerResult = 0;
                if (textResult > -1)
                    layerResult = checkLayers();
                if (textResult > -1 && layerResult > -1) {
                    if (OutputHandler.check() < 0) {
                        JOptionPane.showMessageDialog(frame, "Súbor so zadaným názvom už existuje.", "Varovanie", JOptionPane.ERROR_MESSAGE);
                    } else {
                        try {
                            int result = AutomatonMain.write(AutomatonMain.createMaps(), png);
                            if (result < 0) {
                                JOptionPane.showMessageDialog(frame, "Neočakávaná chyba pri zápise súboru", "Vhyba zápisu", JOptionPane.ERROR_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(frame, "Súbor bol úspešne vytvorený", "Informácia", JOptionPane.INFORMATION_MESSAGE);
                            }
                        } catch (InvalidArgument ignored) {

                        } catch (RunException runException) {
                            JOptionPane.showMessageDialog(frame, "Neočakávaná chyba pri zápise súboru", "Vhyba zápisu", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } catch (NullPointerException ignored) {
            }
            startButton.setEnabled(true);
        }
    }

    protected int checkLayers() throws NullPointerException {
        int L1 = checkLayers(stav1_L1.getSelectedItem().toString(), stav2_L1.getSelectedItem().toString());
        setColors(L1, stav1_L1, stav2_L1);
        int L2 = checkLayers(stav1_L2.getSelectedItem().toString(), stav2_L2.getSelectedItem().toString());
        setColors(L2, stav1_L2, stav2_L2);
        int L3 = checkLayers(stav1_L3.getSelectedItem().toString(), stav2_L3.getSelectedItem().toString());
        setColors(L3, stav1_L3, stav2_L3);
        int L4 = checkLayers(stav1_L4.getSelectedItem().toString(), stav2_L4.getSelectedItem().toString());
        setColors(L4, stav1_L4, stav2_L4);
        if (L1 == 1 && L2 == 1 && L3 == 1 && L4 == 1) {
            JOptionPane.showMessageDialog(frame, "Musí byť použitá aspoň jedna vrstva", "Chyba", JOptionPane.ERROR_MESSAGE);
            return -1;
        }
        if (L1 >= 0 && L2 >= 0 && L3 >= 0 && L4 >= 0) {
            MetaData.setState_I(stateSwitch(stav1_L1.getSelectedItem().toString()));
            MetaData.setState_II(stateSwitch(stav2_L1.getSelectedItem().toString()));
            MetaData.setState_III(stateSwitch(stav1_L2.getSelectedItem().toString()));
            MetaData.setState_IV(stateSwitch(stav2_L2.getSelectedItem().toString()));
            MetaData.setState_V(stateSwitch(stav1_L3.getSelectedItem().toString()));
            MetaData.setState_VI(stateSwitch(stav2_L3.getSelectedItem().toString()));
            MetaData.setState_VII(stateSwitch(stav1_L4.getSelectedItem().toString()));
            MetaData.setState_VIII(stateSwitch(stav2_L4.getSelectedItem().toString()));

            MetaData.setD_L01(slider1.getValue());
            MetaData.setD_L02(slider2.getValue());
            MetaData.setD_L03(slider3.getValue());
            MetaData.setD_L04(slider4.getValue());
            return 0;
        }
        return -1;
    }

    protected Tiles stateSwitch(String state) {
        return switch (state) {
            case "WATER" -> Tiles.WATER;
            case "LAND" -> Tiles.LAND;
            case "LAVA" -> Tiles.LAVA;
            case "SAND" -> Tiles.SAND;
            case "STONE" -> Tiles.STONE;
            case "EMPTY" -> Tiles.EMPTY;
            default -> Tiles.DEFAULT;
        };
    }

    // -1 error code
    // 0 corretc settings
    // 1 unused layer
    protected int checkLayers(String item1, String item2) {
        // if there is two default states layer is unused
        if (item1 == "DEFAULT" && item2 == "DEFAULT")
            return 1;
        // has to be different
        if (item1 == item2)
            return -1;
        if (item1 != "DEFAULT" && item2 == "DEFAULT" || item1 == "DEFAULT" && item2 != "DEFAULT")
            return -1;
        return 0;
    }

    protected void setColors(int code, JComboBox item1, JComboBox item2) {
        if (code < 0) {
            item1.setBackground(Color.PINK);
            item2.setBackground(Color.PINK);
        } else {
            item1.setBackground(new Color(0, 16, 39));
            item2.setBackground(new Color(0, 16, 39));
        }
    }

    protected int checkTextFields() {
        int returnValue = 0;
        String fileName = filenameTextField.getText();
        Integer iteration_count = parse(iterationsTextField.getText());
        Integer max_height = parse(heightTextField.getText());
        Integer max_width = parse(widthTextField.getText());
        if (iteration_count < 0) {
            iterationsTextField.setBackground(Color.PINK);
            returnValue = -1;
        } else {
            iterationsTextField.setBackground(new Color(150, 158, 169));
        }
        if (max_height < 10) {
            heightTextField.setBackground(Color.PINK);
            returnValue = -1;
        } else {
            heightTextField.setBackground(new Color(150, 158, 169));
        }
        if (max_width < 10) {
            widthTextField.setBackground(Color.PINK);
            returnValue = -1;
        } else {
            widthTextField.setBackground(new Color(150, 158, 169));
        }
        // if there is no illegal argument set values to metadata class
        if (returnValue >= 0) {
            MetaData.setFileName(fileName);
            MetaData.setIterationCount(iteration_count);
            MetaData.setMaxHeight(max_height);
            MetaData.setMaxWidth(max_width);
        }
        return returnValue;
    }

    protected int parse(String string) {
        try {
            Integer.parseInt(string);
            return Integer.parseInt(string.trim());
        } catch (NumberFormatException e) {
            return -1;
        }
    }

}
